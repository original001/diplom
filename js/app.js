// Generated by CoffeeScript 1.8.0
var cordovaApp;

angular.module('Monitor', ['ngMaterial', 'ngRoute', 'Diplom.controllers.Main', 'Diplom.services.Main']).config(function($routeProvider) {
  this.timeNow = new Date().getTime();
  persistence.store.websql.config(persistence, 'sensors2', 'База данных для мониторинга', 5 * 1024 * 1024);
  return $routeProvider.when('/', {
    templateUrl: 'home.html',
    reloadOnSearch: false
  });
}).constant('DB', {
  Obj: persistence.define('Obj', {
    name: "TEXT"
  }),
  SensCat: persistence.define('SensCat', {
    name: "TEXT"
  }),
  SensMany: persistence.define('SensMany', {
    sensor: "INT",
    GroupOfSens: "INT"
  }),
  Sensor: persistence.define('Sensor', {
    name: "TEXT",
    sensCat: "INT",
    date: "DATE"
  }),
  Graph: persistence.define('Graph', {
    sensor: "INT",
    date: "DATE",
    mu: "INT",
    eps: "INT"
  }),
  GroupOfSens: persistence.define('GroupOfSens', {
    name: "TEXT",
    sensCat: "INT",
    obj: "INT"
  }),
  Maps: persistence.define('Maps', {
    floor: "INT",
    obj: "INT",
    sensor: "INT",
    coorx: "INT",
    coory: "INT"
  })
});

cordovaApp = {
  initialize: function() {
    return this.bindEvents();
  },
  bindEvents: function() {
    return document.addEventListener('deviceready', this.onDeviceReady, false);
  },
  onDeviceReady: function() {
    return app.receivedEvent('deviceready');
  },
  receivedEvent: function(id) {
    var listeningElement, parentElement, receivedElement;
    parentElement = document.getElementById(id);
    listeningElement = parentElement.querySelector('.listening');
    receivedElement = parentElement.querySelector('.received');
    listeningElement.setAttribute('style', 'display:none');
    receivedElement.setAttribute('style', 'display:block');
    return console.log('Received Event: ' + id);
  }
};

cordovaApp.initialize();

angular.module('Diplom.controllers.Main', []).controller('MainController', function($scope, Main) {
  $scope.lists = [];
  Main.list($scope);
  $scope.addSens = function(nameSens, nameObj) {
    return Main.addSens(nameSens, nameObj, $scope);
  };
  $scope.addObj = function(name) {
    return Main.addObj(name, $scope);
  };
  $scope.remove = function(name) {
    console.log(name);
    return Main.remove('Obj', name);
  };
  return $scope.hello = function(name) {
    return Main.say(name);
  };
});

angular.module('Diplom.services.Main', []).service('Main', function(DB) {
  DB.Obj.hasMany('sensors', DB.Sensor, 'obj');
  persistence.schemaSync();
  this.list = function($scope) {
    return DB.Obj.all().list(function(items) {
      var arr;
      arr = [];
      return items.forEach(function(item) {
        return item.sensors.list(null, function(res) {
          var count;
          count = res.length;
          arr.push({
            name: item.name,
            page: item.id,
            count: count
          });
          $scope.lists = arr;
          return $scope.$apply();
        });
      });
    });
  };
  this.addObj = function(name, $scope) {
    var t;
    t = new DB.Obj;
    t.name = name;
    persistence.add(t);
    persistence.flush();
    return $scope.lists.push({
      name: name,
      page: t.id,
      count: 0
    });
  };
  this.remove = function(dest, name) {
    return DB[dest].all().filter('name', '=', name).destroyAll(function() {
      return console.log('done');
    });
  };
  this.update = function(obj) {};
  this.addSens = function(sensName, objName, $scope) {
    return DB.Obj.findBy(persistence, null, 'name', objName, function(obj) {
      var s;
      if (obj) {
        s = new DB.Sensor({
          name: sensName,
          sensCat: "1",
          date: new Date().getTime()
        });
        obj.sensors.add(s);
        return persistence.flush(function() {
          return $scope.lists.forEach(function(item, ind) {
            if (item.name === obj.name) {
              item.count += 1;
              return $scope.$apply();
            }
          });
        });
      }
    });
  };
  this.say = function(name) {
    return "hello " + name;
  };
});

//# sourceMappingURL=app.js.map
