// Generated by CoffeeScript 1.8.0
var DialogController, absCeil, cordovaApp, moduleCtrl, moduleService;

angular.module('Monitor', ['ngMaterial', 'ngRoute', 'mobile-angular-ui', 'Diplom.controllers.Main', 'Diplom.services.Main', 'naif.base64']).config(function($mdThemingProvider) {
  return $mdThemingProvider.theme('default').primaryPalette('cyan');
}).config(function($routeProvider, $locationProvider) {
  persistence.store.websql.config(persistence, 'sensors3', 'База данных для мониторинга', 5 * 1024 * 1024);
  $routeProvider.when('/', {
    templateUrl: 'view/home.html',
    controller: 'MainController'
  }).when('/map/:objId', {
    templateUrl: 'view/map.html',
    controller: 'MapController'
  }).when('/sensor/:ui/:sensId', {
    templateUrl: 'view/sensor.html',
    controller: 'SensController'
  }).when('/multisensors/:objId', {
    templateUrl: 'view/multisensor.html',
    controller: 'MultiSensController'
  }).when('/list/:objId', {
    templateUrl: 'view/list.html',
    controller: 'ListController'
  }).when('/table/:sensId', {
    templateUrl: 'view/table.html',
    controller: 'TableController'
  }).when('/help/', {
    templateUrl: 'view/help.html'
  });
  return $locationProvider.html5Mode({
    enable: false,
    requireBase: false
  });
}).constant('DB', {
  Obj: persistence.define('Obj', {
    name: "TEXT"
  }),
  SensCat: persistence.define('SensCat6', {
    name: "TEXT",
    ui: "INT",
    color: "INT"
  }),
  SensMany: persistence.define('SensMany', {
    sensor: "INT",
    GroupOfSens: "INT"
  }),
  Sensor: persistence.define('Sensor7', {
    name: "TEXT",
    top: "INT",
    left: "INT",
    key: 'JSON'
  }),
  Graph: persistence.define('Graph3', {
    date: "DATE",
    params: 'JSON'
  }),
  GroupOfSens: persistence.define('GroupOfSens', {
    name: "TEXT",
    sensCat: "INT",
    obj: "INT"
  }),
  Maps: persistence.define('Maps5', {
    name: "TEXT",
    img: "TEXT"
  })
}).config(function(DB) {
  DB.Maps.hasMany('sensors', DB.Sensor, 'map');
  DB.Obj.hasMany('maps', DB.Maps, 'obj');
  DB.Obj.hasMany('sensors', DB.Sensor, 'obj');
  DB.Sensor.hasMany('graphs', DB.Graph, 'sens');
  DB.Sensor.hasOne('category', DB.SensCat);
  return persistence.schemaSync();
});

moduleCtrl = angular.module('Diplom.controllers.Main', []);

moduleService = angular.module('Diplom.services.Main', []);

angular.module('mobile-angular-ui', ['mobile-angular-ui.core.activeLinks', 'mobile-angular-ui.core.fastclick', 'mobile-angular-ui.core.sharedState', 'mobile-angular-ui.core.outerClick', 'mobile-angular-ui.components.modals', 'mobile-angular-ui.components.switch', 'mobile-angular-ui.components.sidebars', 'mobile-angular-ui.components.scrollable', 'mobile-angular-ui.components.navbars']);

cordovaApp = {
  initialize: function() {
    return this.bindEvents();
  },
  bindEvents: function() {
    return document.addEventListener('deviceready', this.onDeviceReady, false);
  },
  onDeviceReady: function() {
    console.log('deviceready fired!');
    return cordovaApp.isReady = true;
  },
  isReady: false
};

cordovaApp.initialize();

absCeil = function(number, down, count, round) {
  var digit, length, positive;
  if (count == null) {
    count = 0;
  }
  positive = number >= 0 ? true : false;
  if (Math.abs(number) >= 1) {
    length = (Math.floor(number) + '').length - 1 - count - !positive;
  } else {
    length = -(Math.floor(1 / number) + '').length - count + !positive;
  }
  digit = number / Math.pow(10, length);
  digit = round ? Math.round(digit) : !down ? Math.ceil(digit) : Math.floor(digit);
  return digit /= Math.pow(10, -length);
};

moduleCtrl.controller('AppController', function($rootScope, $scope, $window, $document, $mdSidenav, $mdUtil) {
  return $scope.sidenavToggle = function() {
    return $mdSidenav('left').toggle();
  };
});

moduleCtrl.controller('ListController', function($rootScope, $scope, $routeParams, List, $window, $mdDialog) {
  $scope.objId = $routeParams.objId;
  $scope.categories = [];
  $scope.checkboxMode = false;
  $scope.selected = [];
  $scope.disable = false;
  $scope.empty = false;
  $scope.lazyShow = true;
  $(function() {
    var w;
    w = $(window);
    $('.index-md-content').height(w.height() - 64);
    return w.resize(function() {
      return $('.index-md-content').height(w.height() - 64);
    });
  });
  $scope.check = function() {
    return $scope.checkboxMode = $scope.checkboxMode ? false : true;
  };
  $scope.build = function() {
    $rootScope.multisensors = $scope.selected;
    return $window.location.href = "#/multisensors/" + $scope.objId;
  };
  $scope.getData = function(item, list, ev) {
    var i, ind, _i, _len;
    for (ind = _i = 0, _len = list.length; _i < _len; ind = ++_i) {
      i = list[ind];
      if (!(i.id === item.id)) {
        continue;
      }
      $scope.selected.splice(ind, 1);
      return false;
    }
    if ($scope.selected.length > 9) {
      $mdDialog.show($mdDialog.alert().parent(angular.element(document.body)).title('Не более 10 графиков за раз').ariaLabel('count of sensor').ok('Окей').targetEvent(ev), $scope.disable = true).then(function() {
        return $scope.disable = false;
      });
      return false;
    }
    return $scope.selected.push({
      id: item.id,
      name: item.name
    });
  };
  return List.list($scope, $scope.objId);
});

moduleCtrl.controller('MainController', function($scope, $routeParams, Main, $mdDialog) {
  $scope.lists = [];
  $scope.lazyShow = true;
  $scope.colors = ['#d11d05', "#05A3D1", "#051FD1", "#FF528D", '#60061E', '#1d1075'];
  $(function() {
    var w;
    w = $(window);
    $('.index-md-content').height(w.height() - 64);
    return w.resize(function() {
      return $('.index-md-content').height(w.height() - 64);
    });
  });
  Main.list($scope);
  $scope.showConfirm = function(e, id) {
    var confirm;
    confirm = $mdDialog.confirm().parent(angular.element(document.body)).title('Вы уверены, что хотите удалить объект').ariaLabel('Подтверждение удаления').ok('Да').cancel('Нет').targetEvent(e);
    return $mdDialog.show(confirm).then(function() {
      return Main.remove(id, $scope);
    });
  };
  $scope.showModalAdd = function(e, name) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: 'view/dialog-add.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Main.addObj(answer, $scope);
    });
  };
  $scope.showModal = function(e, id) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: 'view/dialog.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Main.update(id, answer, $scope);
    });
  };
  $scope.addSens = function(nameSens, nameObj) {
    return Main.addSens(nameSens, nameObj, $scope);
  };
  $scope.update = function(id, newname) {
    return Main.update(id, newname, $scope);
  };
  $scope.addObj = function(name) {
    return Main.addObj(name, $scope);
  };
  $scope.remove = function(id) {
    return Main.remove(id, $scope);
  };
  return $scope.hello = function(name) {
    return Main.say(name);
  };
});

DialogController = function($scope, $mdDialog) {
  $scope.cancel = function() {
    return $mdDialog.cancel();
  };
  return $scope.answer = function(answer) {
    return $mdDialog.hide(answer);
  };
};

moduleCtrl.controller('MapController', function($rootScope, $scope, $routeParams, Map, $mdDialog, $window, $document, $mdToast, $animate) {
  var CatDialogController;
  $scope.tabs = [
    {
      name: 'tab',
      img: '',
      sensors: []
    }
  ];
  $scope.mapId = 0;
  $scope.lazyShow = true;
  $scope.objId = $routeParams.objId;
  $scope.categories = [];
  $scope.colors = ['#d11d05', "#05A3D1", "#051FD1", "#FF528D", '#60061E', '#1d1075'];
  $scope.UI = [
    {
      name: 'Тензодатчик СИТИС',
      id: 1
    }, {
      name: 'Тензодатчик CS-01 C-Sensor',
      id: 2
    }, {
      name: 'Датчик давления CS-05 C-Sensor',
      id: 3
    }, {
      name: 'Датчик давления 1.06 СИТИС',
      id: 4
    }
  ];
  $rootScope.colors = $scope.colors;
  $rootScope.UI = $scope.UI;
  $(function() {
    var w;
    w = $(window);
    $('.index-md-content').height(w.height() - 64);
    return w.resize(function() {
      return $('.index-md-content').height(w.height() - 64);
    });
  });
  $scope.listCat = function() {
    return Map.listCat($scope);
  };
  $scope.onTab = function(id) {
    return $scope.mapId = id;
  };
  Map.list($scope, $routeParams.objId, $scope.colors);
  $scope.cancelAddPlan = function() {
    $('.help-screen').fadeOut(200, function() {
      return $(this).remove();
    });
    $scope.sens.type = void 0;
    return $(document).off('click touchstart', 'md-tab-content.md-active');
  };
  $scope.addSens = function(cat) {
    $('.help-screen').fadeOut(200, function() {
      return $(this).remove();
    });
    $(document).off('click touchstart', 'md-tab-content.md-active');
    $scope.showActionToast();
    $(".b-plan").each(function() {
      return $('<div class="help-screen" />').appendTo($(this)).fadeIn();
    });
    $(document).on('click', 'md-tab-content.md-active', function(e) {
      var $plan, h, left, ofsX, ofsY, top, w;
      ofsX = e.pageX - 25;
      ofsY = e.pageY - 136 + $(this).scrollTop();
      $plan = $(this).find('.b-plan');
      w = $plan.width();
      h = $plan.height();
      left = (ofsX / w * 100).toPrecision(3);
      top = (ofsY / h * 100).toPrecision(3);
      return Map.addSens(cat.id, $scope.colors, top, left, $routeParams.objId, $scope.mapId, $scope);
    });
  };
  $scope.deletePlan = function(e, id) {
    var confirm;
    confirm = $mdDialog.confirm().parent(angular.element(document.body)).title('Вы уверены, что хотите удалить карту?').ariaLabel('Подтверждение удаления').ok('Да').cancel('Нет').targetEvent(e);
    return $mdDialog.show(confirm).then(function() {
      return Map.removePlan(id, $scope);
    });
  };
  $scope.showModalAdd = function(e, name) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: 'view/dialog-add-map.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Map.addPlan(answer.name, answer.img, $scope, $routeParams.objId);
    });
  };
  $scope.editPlan = function(e, id) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: 'view/dialog-edit-map.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Map.update(id, answer.name, answer.img, $scope);
    });
  };
  $scope.toastPosition = {
    bottom: false,
    top: true,
    left: false,
    right: true
  };
  $scope.getToastPosition = function() {
    return Object.keys($scope.toastPosition).filter(function(pos) {
      return $scope.toastPosition[pos];
    }).join(' ');
  };
  $scope.showActionToast = function() {
    var toast;
    toast = $mdToast.simple().content('Режим добавления датчиков').action('Выключить').highlightAction(false).position($scope.getToastPosition());
    return $mdToast.show(toast).then(function() {
      return $scope.cancelAddPlan();
    });
  };
  $scope.addCat = function(e) {
    return $mdDialog.show({
      controller: CatDialogController,
      templateUrl: 'view/dialog-add-category.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Map.addCat(answer.name, answer.color, answer.ui);
    });
  };
  return CatDialogController = function($scope, $mdDialog) {
    $scope.cancel = function() {
      return $mdDialog.cancel();
    };
    $scope.answer = function(answer) {
      return $mdDialog.hide(answer);
    };
    $scope.colors = $rootScope.colors;
    $scope.UI = $rootScope.UI;
    return $scope.listColor = function() {
      return Map.listColor($scope);
    };
  };
});

moduleCtrl.controller('MultiSensController', function($rootScope, $scope, $routeParams, MultiSens, $window, $mdDialog) {
  var $g, paper, s, updatePath;
  $scope.sensors = $rootScope.multisensors;
  $scope.objId = $routeParams.objId;
  $scope.params = [];
  $scope.graph = [];
  $g = $('#graph');
  s = Snap('#graph');
  paper = s.paper;
  MultiSens.list($scope, $scope.sensors, $scope.objId);
  $scope.colors = ['#d11d05', "#05A3D1", "#051FD1", "#FF528D", '#60061E', '#1d1075', '#7183FF', '#B8C1FF', '#FF7967', '#83E3FF'];
  updatePath = function(sensors, paramY) {
    var arr, delta, dl, dlExt, dlGraph, el, ext, getx, gety, h, i, ind, j, kx, ky, maxDate, maxy, minDate, minx, miny, num, sens, sensInd, style, times, val, w, _i, _j, _k, _l, _len, _len1, _len2, _ref, _results;
    paper.clear();
    style = {
      stroke: '#000'
    };
    num = 0;
    maxy = -999999999999;
    miny = 999999999999;
    minDate = 9999999999999;
    maxDate = 0;
    times = [];
    for (_i = 0, _len = sensors.length; _i < _len; _i++) {
      i = sensors[_i];
      _ref = i.graph;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        j = _ref[_j];
        if (j.params[paramY]) {
          num += 1;
          if (j.date.getTime() > maxDate) {
            maxDate = j.date.getTime();
          }
          if (j.date.getTime() < minDate) {
            minDate = j.date.getTime();
          }
          if (j.params[paramY] > maxy) {
            maxy = j.params[paramY];
          }
          if (j.params[paramY] < miny) {
            miny = j.params[paramY];
          }
          j.time = [j.date.getDate(), j.date.getMonth() + 1, j.date.getFullYear() - 2000].join('.');
          if (times.indexOf(j.time) > -1) {
            j.time = '';
          } else {
            times.push(j.time);
          }
        }
      }
    }
    h = 320 / 2;
    w = 20 * num;
    if (w > $g.width()) {
      $g.width(w + 40);
    }
    kx = (maxDate - minDate) / w;
    minx = minDate;
    ky = (maxy - miny) / (h + 50);
    miny = absCeil(miny, true, 2);
    delta = absCeil(maxy - miny) / 10;
    dl = absCeil(delta / ky, false, 3);
    ext = -miny + absCeil(miny, true, 0);
    ext = absCeil(ext, true, 2);
    dlExt = Math.abs(absCeil(ext / ky, false, 3));
    if (maxy === miny) {
      paper.text(8, h - 5, maxy);
    } else {
      for (i = _k = 0; _k < 12; i = ++_k) {
        val = miny + ext + delta * i;
        dlGraph = 280 + dlExt - i * dl;
        if (dlGraph < 40 || dlGraph > 320) {
          continue;
        }
        paper.text(8, 280 + dlExt - i * dl, '' + absCeil(val, true, 3, true)).attr({
          'font-size': '12px'
        });
        paper.path("M 0," + dlGraph + "L " + (w + 10) + "," + dlGraph).attr({
          stroke: 'rgba(0,0,0,.3)',
          strokeWidth: 1
        });
      }
    }
    paper.path("M 5," + (h * 2 - 5) + "L " + (w + 10) + "," + (h * 2 - 5) + "," + w + "," + (h * 2 - 10) + "," + w + "," + (h * 2) + "," + (w + 10) + "," + (h * 2 - 5) + ",").attr(style);
    paper.path("M 5," + (h * 2 - 5) + "L 5,0,10,10,0,10,5,0").attr(style);
    paper.text(10, 20, paramY);
    paper.text(w + 15, h * 2, 't');
    sensInd = 0;
    _results = [];
    for (_l = 0, _len2 = sensors.length; _l < _len2; _l++) {
      sens = sensors[_l];
      if (!(sens.graph.length > 0)) {
        continue;
      }
      arr = sens.graph;
      style = {
        stroke: $scope.colors[sensInd],
        strokeWidth: 2
      };
      arr = arr.filter(function(el, i, a) {
        if (el.params.hasOwnProperty(paramY)) {
          return true;
        } else {
          return false;
        }
      });
      if (!arr.length) {
        continue;
      }
      paper.path("M 0," + (h * 2 + 70 + 20 * (sensInd + 1)) + "L 50," + (h * 2 + 70 + 20 * (sensInd + 1))).attr(style);
      paper.text(60, h * 2 + 74 + 20 * (sensInd + 1), sens.name);
      $g.height(380 + 20 * (sensInd + 2));
      arr = arr.sort(function(a, b) {
        return a.date.getTime() - b.date.getTime();
      });
      getx = function(x) {
        if (!kx) {
          return 5;
        }
        return (x.date.getTime() - minx) / kx + 5;
      };
      gety = function(y) {
        if (!ky) {
          return h;
        }
        return h + 120 - (y.params[paramY] - miny) / ky;
      };
      sensInd += 1;
      _results.push((function() {
        var _len3, _m, _results1;
        _results1 = [];
        for (ind = _m = 0, _len3 = arr.length; _m < _len3; ind = ++_m) {
          el = arr[ind];
          paper.circle(getx(el), gety(el), 4).attr({
            fill: $scope.colors[sensInd - 1]
          });
          paper.text(getx(el) - 3, h * 2, el.time).transform('r90,' + (getx(el) - 5) + ',' + h * 2).attr({
            'font-size': '13px'
          });
          if (ind === 0) {
            continue;
          }
          _results1.push(paper.path('M ' + getx(arr[ind - 1]) + ',' + gety(arr[ind - 1]) + 'L ' + getx(el) + ',' + gety(el)).attr(style));
        }
        return _results1;
      })());
    }
    return _results;
  };
  $scope.updatePath = function(param) {
    return updatePath($scope.sensors, param);
  };
  $scope.alert = function(e, title, content) {
    if (title == null) {
      title = '';
    }
    if (content == null) {
      content = '';
    }
    return $mdDialog.show($mdDialog.alert().parent(angular.element(document.body)).title(title).content(content).ariaLabel('Alert Dialog').ok('ОК').targetEvent(e));
  };
  $scope.setName = function(e) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: 'view/dialog-add.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return $scope.render(answer);
    });
  };
  return $scope.render = function(name) {
    var downloadFile, encodedSvgStr, fail, onGetFileSuccess, onRequestFileSystemSuccess, serializer, svg, svgData, svgStr;
    svg = document.getElementById('graph');
    serializer = new XMLSerializer();
    svgStr = serializer.serializeToString(svg);
    encodedSvgStr = unescape(encodeURIComponent(svgStr));
    svgData = btoa(encodedSvgStr);
    downloadFile = function() {
      console.log('downloadFile');
      return window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, onRequestFileSystemSuccess, fail);
    };
    onRequestFileSystemSuccess = function(fileSystem) {
      console.log('onRequestFileSystemSuccess');
      return fileSystem.root.getFile('/storage/emulated/0/Download/svg.svg', {
        create: true,
        exclusive: false
      }, onGetFileSuccess, fail);
    };
    onGetFileSuccess = function(fileEntry) {
      var fileTransfer, path;
      console.log('onGetFileSuccess!');
      path = fileEntry.toURL().replace('svg.svg', '');
      fileTransfer = new FileTransfer();
      fileEntry.remove();
      return fileTransfer.download("data:image/svg+xml;base64," + svgData, path + ("" + name + ".svg"), function(file) {
        return $scope.alert(null, 'График успешно загружен', "Файл находится в папке Download, имя файла - " + name + ".svg");
      }, function(error) {
        return $scope.alert(null, 'При загрузке возникла ошибка', "Код ошибки – " + error.code + ", объект загрузки – " + error.target);
      });
    };
    fail = function(evt) {
      return $scope.alert(null, 'При загрузке возникла ошибка', "Код ошибки – " + evt.target.error.code);
    };
    if (cordovaApp.isReady) {
      console.log('ready and fire function');
      return downloadFile();
    } else {
      return $scope.alert(null, 'Oшибка!', "cordova.js не загружен");
    }
  };
});

moduleCtrl.controller('SensController', function($rootScope, $scope, $routeParams, Sens, $window, $document, $mdDialog) {
  var $g, SensDialogController, SensEditDialogController, paper, s, updatePath;
  $scope.sensor = [];
  $scope.graph = [];
  $scope.categories = [];
  $scope.paramInput = false;
  $scope.keys = [];
  Sens.loadKeySens($routeParams.sensId, $scope);
  $g = $('#graph');
  s = Snap('#graph');
  paper = s.paper;
  updatePath = function(arr, paramY, multi) {
    var el, getx, gety, h, i, ind, kx, ky, maxy, minx, miny, num, paramArr, style, time, w, _i, _j, _len, _len1, _results;
    paper.clear();
    arr = arr.filter(function(el, i, a) {
      if (el.params.hasOwnProperty(paramY)) {
        return true;
      } else {
        return false;
      }
    });
    if (!arr.length) {
      return false;
    }
    arr = arr.sort(function(a, b) {
      return a.date.getTime() - b.date.getTime();
    });
    num = arr.length;
    h = 320 / 2;
    w = 80 * num;
    if (w > $g.width()) {
      $g.width(w + 40);
    }
    style = {
      stroke: '#000'
    };
    paper.path("M 5," + (h * 2 - 5) + "L " + (w + 10) + "," + (h * 2 - 5) + "," + w + "," + (h * 2 - 10) + "," + w + "," + (h * 2) + "," + (w + 10) + "," + (h * 2 - 5) + ",").attr(style);
    paper.path("M 5," + (h * 2 - 5) + "L 5,0,10,10,0,10,5,0").attr(style);
    kx = (-arr[0].date.getTime() + arr[num - 1].date.getTime()) / w;
    minx = arr[0].date.getTime();
    paramArr = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      i = arr[_i];
      paramArr.push(i.params[paramY]);
    }
    maxy = Math.max.apply(Math, paramArr);
    miny = Math.min.apply(Math, paramArr);
    ky = (maxy - miny) / (h + 50);
    getx = function(x) {
      if (!kx) {
        return 5;
      }
      return (x.date.getTime() - minx) / kx + 5;
    };
    gety = function(y) {
      if (!ky) {
        return h;
      }
      return h + 120 - (y.params[paramY] - miny) / ky;
    };
    paper.text(10, 20, paramY);
    paper.text(w + 15, h * 2, 't');
    _results = [];
    for (ind = _j = 0, _len1 = arr.length; _j < _len1; ind = ++_j) {
      el = arr[ind];
      time = [el.date.getDate(), el.date.getMonth() + 1, el.date.getFullYear() - 2000].join('.');
      paper.circle(getx(el), gety(el), 3).attr({
        fill: '#CB0000'
      });
      paper.text(getx(el) - 3, gety(el) - 10, absCeil(el.params[paramY], false, 4));
      paper.text(getx(el) - 3, h * 2, time).transform('r90,' + (getx(el) - 5) + ',' + h * 2);
      if (ind === 0) {
        continue;
      }
      paper.path("M " + (getx(el)) + "," + (gety(el)) + "L" + (getx(el)) + "," + (h * 2 - 5)).attr({
        stroke: '#00BCD4'
      });
      _results.push(paper.path('M ' + getx(arr[ind - 1]) + ',' + gety(arr[ind - 1]) + 'L ' + getx(el) + ',' + gety(el)).attr(style));
    }
    return _results;
  };
  $scope.addParam = function() {
    if (!$scope.paramInput) {
      return $scope.paramInput = true;
    } else if (!$scope.paramName) {
      return $scope.paramInput = false;
    } else {
      $scope.paramInput = false;
      $scope.addingParams.push($scope.paramName);
      return $scope.params.push($scope.paramName);
    }
  };
  $scope.updatePath = function(param) {
    return updatePath($scope.graph, param);
  };
  $scope.removeSens = function(e) {
    var confirm;
    confirm = $mdDialog.confirm().parent(angular.element(document.body)).title('Вы уверены, что хотите удалить датчик?').ariaLabel('Подтверждение удаления').ok('Да').cancel('Нет').targetEvent(e);
    return $mdDialog.show(confirm).then(function() {
      return Sens.removeSens($routeParams.sensId, $scope);
    });
  };
  $scope.editSens = function(e) {
    return $mdDialog.show({
      controller: SensEditDialogController,
      templateUrl: 'view/dialog-edit-sens.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Sens.editSens(answer.name, answer.category, answer.keys, $routeParams.sensId, $scope);
    });
  };
  $scope.removeGraph = function() {
    return Sens.removeGraph($scope);
  };
  $scope.addGraph = function(e) {
    return $mdDialog.show({
      controller: SensDialogController,
      templateUrl: 'view/dialog-add-graph.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      var A, B, B0, B1, C, D, F, F0, P, P0, Pb, Pt, R1, S0, S1, T, T0, T1, TCd, TCk, a, b, dme, i, k, me, params, v, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      switch ($routeParams.ui) {
        case '1':
          _ref = $scope.keys;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            switch (i.name) {
              case 'K':
                k = i.val;
                break;
              case 'α':
                a = i.val;
                break;
              case 'ß':
                b = i.val;
                break;
              case 'T0':
                T0 = i.val;
            }
          }
          params = {};
          if (answer.params.f != null) {
            F = params.f = absCeil(answer.params.f, true, 4, true);
            T = params.t = absCeil(answer.params.t, true, 4, true);
            me = params.me = Math.pow(F, 2) * 0.001 * k * 4.479;
            dme = params.dme = me + (T - T0) * (a - b);
            params.g = absCeil(me * 210 * 0.001, true, 4, true);
            params.dg = absCeil(dme * 210 * 0.001, true, 4, true);
          }
          _ref1 = answer.params;
          for (k in _ref1) {
            v = _ref1[k];
            if (k !== 'f') {
              params[k] = v;
            }
          }
          break;
        case '2':
          _ref2 = $scope.keys;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            i = _ref2[_j];
            switch (i.name) {
              case 'ТСк':
                TCk = i.val;
                break;
              case 'TCд':
                TCd = i.val;
                break;
              case 'F0':
                F0 = i.val;
                break;
              case 'T0':
                T0 = i.val;
            }
          }
          params = {};
          if (answer.params.f != null) {
            F = params.f = answer.params.f;
            T = params.t = answer.params.t;
            me = params.me = Math.pow(F, 2) * 0.001 * 4.062;
            dme = params.dme = Math.pow(F - F0, 2) * 4.062 / 1000 - (TCk - TCd) * (T - T0);
            params.g = me * 210 * 0.001;
            params.dg = dme * 210 * 0.001;
          }
          _ref3 = answer.params;
          for (k in _ref3) {
            v = _ref3[k];
            if (k !== 'f') {
              params[k] = v;
            }
          }
          break;
        case '3':
          _ref4 = $scope.keys;
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            i = _ref4[_k];
            switch (i.name) {
              case 'A':
                A = i.val;
                break;
              case 'B':
                B = i.val;
                break;
              case 'C':
                C = i.val;
                break;
              case 'D':
                D = i.val;
                break;
              case 'S0':
                S0 = i.val;
                break;
              case 'S1':
                S1 = i.val;
                break;
              case 'T0':
                T0 = i.val;
                break;
              case 'P0':
                P0 = i.val;
                break;
              case 'k':
                k = i.val;
            }
          }
          params = {};
          if (answer.params.f != null) {
            params.f = answer.params.f;
            T1 = params.t = answer.params.t;
            R1 = Math.pow(params.f, 2) / 1000;
            P = A * Math.pow(R1, 3) + B * Math.pow(R1, 2) + C * R1 + D + k * (T1 - T0) - (S1 - S0);
            params.dP = P0 - P;
          }
          _ref5 = answer.params;
          for (k in _ref5) {
            v = _ref5[k];
            if (k !== 'f') {
              params[k] = v;
            }
          }
          break;
        case '4':
          _ref6 = $scope.keys;
          for (_l = 0, _len3 = _ref6.length; _l < _len3; _l++) {
            i = _ref6[_l];
            switch (i.name) {
              case 'A':
                A = i.val;
                break;
              case 'B':
                B = i.val;
                break;
              case 'α':
                a = i.val;
                break;
              case 'B0':
                B0 = i.val;
                break;
              case 'B1':
                B1 = i.val;
                break;
              case 'T0':
                T0 = i.val;
                break;
              case 'P0':
                T0 = i.val;
            }
          }
          params = {};
          if (answer.params.f != null) {
            Pt = a * (T1 - T0);
            Pb = B - B0;
            params.f = answer.params.f;
            T1 = params.t = answer.params.t;
            params.dP = P0 - Pt + Pb + (A * Math.pow(F, 4) * 10 - 6 + B * F * F / 1000) - (A * Math.pow(F0, 4) * Math.pow(10, -6) + B * Math.pow(F0, 2) / 1000) + a * (T - T0) - (B - B0) * 0.133322;
          }
          _ref7 = answer.params;
          for (k in _ref7) {
            v = _ref7[k];
            if (k !== 'f') {
              params[k] = v;
            }
          }
          break;
        default:
          params = {};
          if (answer.params.f != null) {
            params.f = answer.params.f;
            params.me = params.f * 5;
          }
          _ref8 = answer.params;
          for (k in _ref8) {
            v = _ref8[k];
            if (k !== 'f') {
              params[k] = v;
            }
          }
      }
      return Sens.addGraph(answer.date, params, $scope, $routeParams.sensId);
    });
  };
  Sens.list($scope, $routeParams.sensId);
  switch ($routeParams.ui) {
    case '1':
      $scope.params = ['f', 'me', 'dme', 'g', 'dg'];
      $scope.addingParams = ['f', 't'];
      break;
    case '2':
      $scope.params = ['f', 'me', 'dme', 'g', 'dg'];
      $scope.addingParams = ['f', 't'];
      break;
    case '3':
      $scope.params = ['f', 'dP'];
      $scope.addingParams = ['f', 't'];
      break;
    case '4':
      $scope.params = ['f', 'dP'];
      $scope.addingParams = ['f', 't'];
      break;
    default:
      $scope.params = ['f', 'me'];
      $scope.addingParams = ['f'];
  }
  $rootScope.params = $scope.params;
  $rootScope.addingParams = $scope.addingParams;
  SensEditDialogController = function($scope, $mdDialog) {
    $scope.cancel = function() {
      return $mdDialog.cancel();
    };
    $scope.answer = function(answer) {
      return $mdDialog.hide(answer);
    };
    $scope.loadCat = function() {
      return Sens.loadCat($scope);
    };
    $scope.keys = [];
    Sens.loadKeySens($routeParams.sensId, $scope);
    return $scope.sensor = {
      key: {}
    };
  };
  return SensDialogController = function($rootScope, $scope, $mdDialog) {
    $scope.cancel = function() {
      return $mdDialog.cancel();
    };
    $scope.answer = function(answer) {
      return $mdDialog.hide({
        params: $scope.graph.val,
        date: answer
      });
    };
    $scope.params = $rootScope.params;
    $scope.addingParams = $rootScope.addingParams;
    return $scope.graph = {
      val: {}
    };
  };
});

moduleCtrl.controller('TableController', function($rootScope, $scope, $routeParams, Table, $mdDialog) {
  $scope.lazyShow = false;
  $scope.sensor = {
    name: ''
  };
  $scope.params = [];
  $scope.nameOfParams = [];
  $scope.round = function(number) {
    return absCeil(number, false, 4);
  };
  Table.list($scope, $routeParams.sensId);
  $(function() {
    var w;
    w = $(window);
    $('.index-md-content').height(w.height() - 64);
    return w.resize(function() {
      return $('.index-md-content').height(w.height() - 64);
    });
  });
  $scope.setName = function(e) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: 'view/dialog-add.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      console.log(answer);
      return $scope.exportTable(answer);
    });
  };
  $scope.alert = function(e, title, content) {
    if (title == null) {
      title = '';
    }
    if (content == null) {
      content = '';
    }
    return $mdDialog.show($mdDialog.alert().parent(angular.element(document.body)).title(title).content(content).ariaLabel('Alert Dialog').ok('ОК').targetEvent(e));
  };
  return $scope.exportTable = function(name) {
    var downloadFile, fail, html, onGetFileSuccess, onRequestFileSystemSuccess;
    html = document.getElementById('table').innerHTML;
    html = html.replace(/\s{2,}/g, '').replace(/%/g, '%25').replace(/&/g, '%26').replace(/#/g, '%23').replace(/"/g, '%22').replace(/'/g, '%27');
    html = '<!DOCTYPE html><html><head><meta charset="utf-8" /></head><body>' + html + '</body></html>';
    downloadFile = function() {
      console.log('downloadFile');
      return window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, onRequestFileSystemSuccess, fail);
    };
    onRequestFileSystemSuccess = function(fileSystem) {
      console.log('onRequestFileSystemSuccess');
      return fileSystem.root.getFile('/storage/emulated/0/Download/table.html', {
        create: true,
        exclusive: false
      }, onGetFileSuccess, fail);
    };
    onGetFileSuccess = function(fileEntry) {
      var fileTransfer, path;
      console.log('onGetFileSuccess!');
      path = fileEntry.toURL().replace('table.html', '');
      fileTransfer = new FileTransfer();
      fileEntry.remove();
      return fileTransfer.download("data:text/html," + html, path + ("" + name + ".html"), function(file) {
        return $scope.alert(null, 'График успешно загружен', "Файл находится в папке Download, имя файла - " + name + ".html");
      }, function(error) {
        return $scope.alert(null, 'При загрузке возникла ошибка', "Код ошибки – " + error.code + ", объект загрузки – " + error.target);
      });
    };
    fail = function(evt) {
      return $scope.alert(null, 'При загрузке возникла ошибка', "Код ошибки – " + evt.target.error.code);
    };
    if (cordovaApp.isReady) {
      console.log('ready and fire function');
      return downloadFile();
    } else {
      return $scope.alert(null, 'Oшибка!', "cordova.js не загружен");
    }
  };
});

moduleService.service('List', function(DB) {
  this.list = function($scope, objId) {
    var exp;
    exp = {
      obj: false
    };
    DB.Obj.findBy(persistence, null, 'id', objId, function(obj) {
      return exp.obj = obj ? obj : false;
    });
    DB.SensCat.all().list(function(cats) {
      if (cats.length) {
        return cats.forEach(function(cat, ind, ar) {
          return $scope.categories.push({
            name: cat.name,
            id: cat.id,
            sensors: []
          });
        });
      }
    });
    return persistence.flush(function() {
      return exp.obj.sensors.list(function(senses) {
        if (!senses.length) {
          $scope.empty = true;
          $scope.lazyShow = false;
          return $scope.$apply();
        } else {
          senses.forEach(function(sens, ind, ar) {
            return sens.fetch('category', function(cat) {
              var i, _i, _len, _ref, _results;
              if (cat != null) {
                _ref = $scope.categories;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  i = _ref[_i];
                  if (i.id === cat.id) {
                    _results.push(i.sensors.push({
                      name: sens.name,
                      ui: cat.ui,
                      id: sens.id
                    }));
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              }
            });
          });
          return persistence.flush(function() {
            $scope.lazyShow = false;
            return $scope.$apply();
          });
        }
      });
    });
  };
});

moduleService.service('Main', function(DB) {
  this.list = function($scope) {
    return DB.Obj.all().list(function(items) {
      var arr;
      if (!items.length) {
        return $scope.lazyShow = false;
      } else {
        arr = [];
        return items.forEach(function(item, ind, itemsArray) {
          var indLast;
          indLast = itemsArray.length - 1;
          return item.sensors.list(function(senses) {
            var categories;
            categories = [];
            senses.forEach(function(sens) {
              return sens.fetch('category', function(cat) {
                var i, _i, _len;
                if (!cat) {
                  return false;
                } else {
                  for (_i = 0, _len = categories.length; _i < _len; _i++) {
                    i = categories[_i];
                    if (!(i.id === cat.id)) {
                      continue;
                    }
                    i.count += 1;
                    return false;
                  }
                }
                return categories.push({
                  name: cat.name,
                  id: cat.id,
                  count: 1,
                  color: cat.color
                });
              });
            });
            return persistence.flush(function() {
              arr.push({
                name: item.name,
                id: item.id,
                categories: categories
              });
              $scope.lists = arr;
              if (ind === indLast) {
                $scope.lazyShow = false;
              }
              return $scope.$apply();
            });
          });
        });
      }
    });
  };
  this.addObj = function(name, $scope) {
    var t;
    t = new DB.Obj;
    t.name = name;
    persistence.add(t);
    persistence.flush();
    return $scope.lists.push({
      name: name,
      id: t.id,
      count: 0
    });
  };
  this.remove = function(id, $scope) {
    DB.Obj.findBy(persistence, null, 'id', id, function(obj) {
      obj.maps.destroyAll();
      obj.sensors.list(function(senses) {
        return senses.forEach(function(sens) {
          return sens.graphs.destroyAll();
        });
      });
      return obj.sensors.destroyAll();
    });
    return persistence.flush(function() {
      return DB.Obj.all().filter('id', '=', id).destroyAll(function() {
        return $scope.lists.forEach(function(elem, ind) {
          if (elem.id === id) {
            $scope.lists.splice(ind, 1);
            return $scope.$apply();
          }
        });
      });
    });
  };
  this.update = function(id, newName, $scope) {
    return DB.Obj.all().filter('id', '=', id).one(function(obj) {
      obj.name = newName;
      return persistence.flush(function() {
        return $scope.lists.forEach(function(item, ind) {
          if (item.id === obj.id) {
            item.name = newName;
            return $scope.$apply();
          }
        });
      });
    });
  };
  this.addSens = function(sensName, objName, $scope) {
    return DB.Obj.findBy(persistence, null, 'name', objName, function(obj) {
      var s;
      if (obj) {
        s = new DB.Sensor({
          name: sensName,
          sensCat: "1",
          date: new Date().getTime()
        });
        obj.sensors.add(s);
        return persistence.flush(function() {
          return $scope.lists.forEach(function(item, ind) {
            if (item.name === obj.name) {
              item.count += 1;
              return $scope.$apply();
            }
          });
        });
      }
    });
  };
});

moduleService.service('Map', function(DB) {
  this.list = function($scope, objId, colors) {
    return DB.Obj.findBy(persistence, null, 'id', objId, function(obj) {
      if (obj) {
        return obj.maps.list(function(items) {
          var arr;
          arr = [];
          if (items.length === 0) {
            $scope.lazyShow = false;
            $scope.tabs = [];
            $scope.$apply();
            return;
          }
          return items.forEach(function(item) {
            var sensors;
            sensors = [];
            return item.sensors.list(null, function(sens) {
              sens.forEach(function(sen) {
                return sen.fetch('category', function(cat) {
                  if (!cat) {
                    cat = {
                      ui: 0,
                      color: 0
                    };
                  }
                  return sensors.push({
                    id: sen.id,
                    top: sen.top,
                    name: sen.name,
                    left: sen.left,
                    ui: cat.ui,
                    color: colors[cat.color]
                  });
                });
              });
              return persistence.flush(function() {
                arr.push({
                  name: item.name,
                  id: item.id,
                  img: item.img,
                  sensors: sensors
                });
                $scope.mapId = arr[0].id;
                $scope.tabs = arr;
                $scope.lazyShow = false;
                return $scope.$apply();
              });
            });
          });
        });
      }
    });
  };
  this.addPlan = function(name, img, $scope, objId) {
    return DB.Obj.findBy(persistence, null, 'id', objId, function(obj) {
      var t;
      if (obj) {
        t = new DB.Maps;
        t.name = name;
        t.img = img;
        obj.maps.add(t);
        return persistence.flush(function() {
          $scope.tabs.push({
            id: t.id,
            name: name,
            img: img,
            sensors: []
          });
          $scope.mapId = t.id;
          return $scope.$apply();
        });
      }
    });
  };
  this.removePlan = function(id, $scope) {
    DB.Maps.findBy(persistence, null, 'id', id, function(map) {
      map.sensors.list(function(senses) {
        return senses.forEach(function(sens) {
          return sens.graphs.destroyAll();
        });
      });
      return map.sensors.destroyAll();
    });
    return persistence.flush(function() {
      return DB.Maps.all().filter('id', '=', id).destroyAll(function() {
        return $scope.tabs.forEach(function(elem, ind) {
          var selInd;
          if (elem.id === id) {
            $scope.tabs.splice(ind, 1);
            $scope.$apply();
          }
          selInd = $scope.tabs[$scope.selectedIndex] || {
            id: 0
          };
          return $scope.mapId = selInd.id != null ? selInd.id : void 0;
        });
      });
    });
  };
  this.update = function(id, newName, newImg, $scope) {
    if (!newName && !newImg) {
      return false;
    }
    return DB.Maps.all().filter('id', '=', id).one(function(obj) {
      if (newName) {
        obj.name = newName;
      }
      if (newImg) {
        obj.img = newImg;
      }
      return persistence.flush(function() {
        return $scope.tabs.forEach(function(item, ind) {
          if (item.id === obj.id) {
            if (newName) {
              item.name = newName;
            }
            if (newImg) {
              item.img = newImg;
            }
            return $scope.$apply();
          }
        });
      });
    });
  };
  this.addSens = function(sensTypeId, colors, top, left, objId, mapId, $scope) {
    var exp;
    exp = {
      obj: false,
      map: false,
      type: false,
      count: 0
    };
    DB.Obj.findBy(persistence, null, 'id', objId, function(obj) {
      if (obj) {
        return exp.obj = obj;
      }
    });
    DB.Maps.findBy(persistence, null, 'id', mapId, function(map) {
      if (map) {
        return exp.map = map;
      }
    });
    DB.SensCat.findBy(persistence, null, 'id', sensTypeId, function(type) {
      if (type) {
        exp.type = type;
      }
      return DB.Sensor.all().filter('category', '=', type.id).list(function(sensors) {
        return exp.count = sensors.length + 1;
      });
    });
    return persistence.flush(function() {
      var catName, l, s, sensName, sp;
      catName = exp.type.name;
      sp = catName.split(' ');
      l = sp.length;
      sensName = sp[l - 1].slice(0, 6);
      s = new DB.Sensor({
        name: sensName + '-' + exp.count,
        top: top,
        left: left
      });
      if (exp.obj && exp.map && exp.type) {
        s.category = exp.type;
        exp.obj.sensors.add(s);
        exp.map.sensors.add(s);
        if (exp.type.ui === 1) {
          s.key = JSON.stringify([
            {
              name: 'K',
              val: 1,
              "eval": ''
            }, {
              name: 'α',
              val: 12,
              "eval": 'микрострейн'
            }, {
              name: 'ß',
              val: 10.5,
              "eval": 'микрострейн'
            }, {
              name: 'T0',
              val: 1,
              "eval": '˚C'
            }
          ]);
        }
        if (exp.type.ui === 2) {
          s.key = JSON.stringify([
            {
              name: 'ТСк',
              val: 12.2,
              "eval": 'με/˚С'
            }, {
              name: 'TCд',
              val: 12.2,
              "eval": 'με/˚С'
            }, {
              name: 'F0',
              val: 1,
              "eval": 'Гц'
            }, {
              name: 'T0',
              val: 1,
              "eval": '˚C'
            }
          ]);
        }
        if (exp.type.ui === 3) {
          s.key = JSON.stringify([
            {
              name: 'A',
              val: 3.65 * Math.pow(10, -12),
              "eval": ''
            }, {
              name: 'B',
              val: 8.67 * Math.pow(10, -8),
              "eval": ''
            }, {
              name: 'C',
              val: -2.78563 * Math.pow(10, -4),
              "eval": ''
            }, {
              name: 'D',
              val: 6.22362,
              "eval": ''
            }, {
              name: 'k',
              val: -0.002,
              "eval": 'кг·˚С/см2'
            }, {
              name: 'S0',
              val: 1.020,
              "eval": 'кг/см2'
            }, {
              name: 'S1',
              val: 1.001,
              "eval": 'кг/см2'
            }, {
              name: 'T0',
              val: 1,
              "eval": '˚C'
            }, {
              name: 'P0',
              val: 1,
              "eval": 'кг/см2'
            }
          ]);
        }
        if (exp.type.ui === 4) {
          s.key = JSON.stringify([
            {
              name: 'A',
              val: 1,
              "eval": ''
            }, {
              name: 'B',
              val: 1,
              "eval": ''
            }, {
              name: 'α',
              val: 1,
              "eval": ''
            }, {
              name: 'B0',
              val: 1,
              "eval": ''
            }, {
              name: 'B1',
              val: 1,
              "eval": ''
            }, {
              name: 'P0',
              val: 1,
              "eval": ''
            }, {
              name: 'T0',
              val: 1,
              "eval": ''
            }
          ]);
        }
        return persistence.flush(function() {
          return $scope.tabs.forEach(function(tabs, ind) {
            var _base;
            if (tabs.id === exp.map.id) {
              if ((_base = $scope.tabs[ind]).sensors == null) {
                _base.sensors = [];
              }
              $scope.tabs[ind].sensors.push({
                id: s.id,
                type: sensTypeId,
                name: s.name,
                top: top,
                left: left,
                ui: exp.type.ui,
                color: colors[exp.type.color]
              });
              return $scope.$apply();
            }
          });
        });
      }
    });
  };
  this.addCat = function(nameCat, color, ui) {
    var c;
    if (nameCat == null) {
      nameCat = ui.name;
    }
    c = new DB.SensCat;
    c.name = nameCat;
    c.color = color;
    c.ui = ui.id;
    persistence.add(c);
    return persistence.flush(function() {
      return console.log("sensor " + c.name + " added with color " + color + " and ui number " + ui + "!");
    });
  };
  this.listCat = function($scope) {
    return DB.SensCat.all().list(function(cats) {
      var arrCats;
      if (cats) {
        arrCats = [];
        return cats.forEach(function(cat, ind, ar) {
          arrCats.push({
            id: cat.id,
            name: cat.name,
            color: cat.color
          });
          if (ind === ar.length - 1) {
            $scope.categories = arrCats;
            return $scope.$apply();
          }
        });
      }
    });
  };
});

moduleService.service('MultiSens', function(DB, $window) {
  this.list = function($scope, sensors, objId) {
    if (sensors) {
      return sensors.forEach(function(sensor, sensInd) {
        return DB.Sensor.findBy(persistence, null, 'id', sensor.id, function(sens) {
          sens.graphs.list(function(graphs) {
            var graphArr, l;
            graphArr = [];
            l = graphs.length;
            if (l > 0) {
              return graphs.forEach(function(graph, ind) {
                var ar1, ar2, el1, el2, i, j, params, _i, _j, _k, _len, _len1, _len2;
                params = JSON.parse(graph.params);
                delete params.t;
                graphArr.push({
                  date: new Date(graph.date),
                  params: params
                });
                ar2 = Object.keys(params);
                ar1 = $scope.params;
                for (i = _i = 0, _len = ar1.length; _i < _len; i = ++_i) {
                  el1 = ar1[i];
                  for (j = _j = 0, _len1 = ar2.length; _j < _len1; j = ++_j) {
                    el2 = ar2[j];
                    if (el1 !== el2) {
                      continue;
                    }
                    ar2.splice(j, 1);
                  }
                }
                for (_k = 0, _len2 = ar2.length; _k < _len2; _k++) {
                  i = ar2[_k];
                  $scope.params.push(i);
                }
                if (ind === l - 1) {
                  return $scope.graph = graphArr;
                }
              });
            } else {
              return $scope.graph = [];
            }
          });
          return persistence.flush(function() {
            var firstVar;
            $scope.sensors[sensInd].graph = $scope.graph;
            $scope.$apply();
            if (sensInd === sensors.length - 1) {
              firstVar = Object.getOwnPropertyNames($scope.sensors[0].graph[0].params)[0];
              return $scope.updatePath(firstVar);
            }
          });
        });
      });
    }
  };
});

moduleService.service('Sens', function(DB, $window) {
  this.list = function($scope, sensId) {
    return DB.Sensor.findBy(persistence, null, 'id', sensId, function(sens) {
      var arr;
      arr = [];
      sens.fetch('obj', function(obj) {
        var objId, objName;
        objName = obj.name;
        objId = obj.id;
        return sens.fetch('map', function(map) {
          var mapName;
          mapName = map.name;
          arr.push({
            id: sens.id,
            name: sens.name,
            obj: objName,
            objId: objId,
            map: mapName
          });
          $scope.sensor = arr;
          return $scope.$apply();
        });
      });
      return sens.graphs.list(function(graphs) {
        var graphArr, l;
        graphArr = [];
        l = graphs.length;
        return graphs.forEach(function(graph, ind) {
          var ar1, ar2, el1, el2, i, j, params, _i, _j, _k, _len, _len1, _len2;
          params = JSON.parse(graph.params);
          graphArr.push({
            date: new Date(graph.date),
            params: params
          });
          delete params.t;
          ar2 = Object.keys(params);
          ar1 = $scope.params;
          for (i = _i = 0, _len = ar1.length; _i < _len; i = ++_i) {
            el1 = ar1[i];
            for (j = _j = 0, _len1 = ar2.length; _j < _len1; j = ++_j) {
              el2 = ar2[j];
              if (el1 !== el2) {
                continue;
              }
              ar2.splice(j, 1);
            }
          }
          for (_k = 0, _len2 = ar2.length; _k < _len2; _k++) {
            i = ar2[_k];
            $scope.params.push(i);
            $scope.addingParams.push(i);
          }
          if (ind === l - 1) {
            $scope.graph = graphArr;
            $scope.$apply();
            return $scope.updatePath(Object.getOwnPropertyNames(graphArr[0].params)[0]);
          }
        });
      });
    });
  };
  this.removeSens = function(id, $scope) {
    DB.Sensor.findBy(persistence, null, 'id', id, function(sens) {
      return sens.graphs.destroyAll();
    });
    return persistence.flush(function() {
      return DB.Sensor.findBy(persistence, null, 'id', id, function(sens) {
        return sens.fetch('obj', function(obj) {
          persistence.remove(sens);
          return persistence.flush(function() {
            return $window.location.href = "#/map/" + obj.id;
          });
        });
      });
    });
  };
  this.removeGraph = function($scope) {
    return DB.Graph.all().destroyAll(function() {});
  };
  this.editSens = function(newName, category, keys, id, $scope) {
    return DB.Sensor.findBy(persistence, null, 'id', id, function(sens) {
      var i, ind, k, sensKey, v, _results;
      if (sens) {
        if (newName) {
          sens.name = newName;
          persistence.flush(function() {
            $scope.sensor[0].name = newName;
            return $scope.$apply();
          });
        }
        if (category) {
          DB.SensCat.findBy(persistence, null, 'id', category, function(cat) {
            if (cat) {
              sens.category = cat;
              return persistence.flush(function() {});
            }
          });
        }
        if (Object.keys(keys).length > 0) {
          sensKey = JSON.parse(sens.key);
          _results = [];
          for (k in keys) {
            v = keys[k];
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (ind = _i = 0, _len = sensKey.length; _i < _len; ind = ++_i) {
                i = sensKey[ind];
                if (!(k === i.name)) {
                  continue;
                }
                sensKey[ind].val = v;
                sens.key = JSON.stringify(sensKey);
                _results1.push(persistence.flush(function() {}));
              }
              return _results1;
            })());
          }
          return _results;
        }
      }
    });
  };
  this.addCat = function(nameCat, color) {
    var c;
    c = new DB.SensCat;
    c.name = nameCat;
    c.color = color;
    persistence.add(c);
    return persistence.flush(function() {
      return console.log("sensor " + c.name + " added with color " + color + "!");
    });
  };
  this.loadCat = function($scope) {
    return DB.SensCat.all().list(function(cats) {
      var arrCats;
      if (cats) {
        arrCats = [];
        return cats.forEach(function(cat, ind, ar) {
          arrCats.push({
            id: cat.id,
            name: cat.name
          });
          if (ind === ar.length - 1) {
            $scope.categories = arrCats;
            return $scope.$apply();
          }
        });
      }
    });
  };
  this.addGraph = function(date, params, $scope, sensId) {
    return DB.Sensor.findBy(persistence, null, 'id', sensId, function(sens) {
      var t;
      t = new DB.Graph;
      t.date = date;
      t.params = JSON.stringify(params);
      sens.graphs.add(t);
      return persistence.flush(function() {
        $scope.graph.push({
          date: date,
          params: params
        });
        $scope.$apply();
        return $scope.updatePath(Object.keys(params)[0]);
      });
    });
  };
  this.loadKeySens = function(sensId, $scope) {
    return DB.Sensor.findBy(persistence, null, 'id', sensId, function(sens) {
      if (sens) {
        return $scope.keys = JSON.parse(sens.key);
      }
    });
  };
});

moduleService.service('Table', function(DB) {
  this.list = function($scope, sensorId) {
    return DB.Sensor.findBy(persistence, null, 'id', sensorId, function(sens) {
      var arr;
      arr = {
        name: sens.name,
        key: JSON.parse(sens.key)
      };
      sens.fetch('map', function(map) {
        return arr.map = map;
      });
      sens.fetch('obj', function(obj) {
        return arr.obj = obj;
      });
      sens.fetch('category', function(cat) {
        return arr.cat = cat;
      });
      sens.graphs.list(function(graphs) {
        if (graphs.length) {
          graphs.forEach(function(graph, ind) {
            var ar1, ar2, arrParams, el1, el2, i, j, k, params, v, _i, _j, _k, _len, _len1, _len2;
            params = JSON.parse(graph.params);
            arrParams = [];
            for (k in params) {
              v = params[k];
              arrParams.push({
                name: k,
                val: v,
                "eval": ''
              });
            }
            ar2 = Object.keys(params);
            ar1 = $scope.nameOfParams;
            for (i = _i = 0, _len = ar1.length; _i < _len; i = ++_i) {
              el1 = ar1[i];
              for (j = _j = 0, _len1 = ar2.length; _j < _len1; j = ++_j) {
                el2 = ar2[j];
                if (el1 !== el2) {
                  continue;
                }
                ar2.splice(j, 1);
              }
            }
            for (_k = 0, _len2 = ar2.length; _k < _len2; _k++) {
              i = ar2[_k];
              $scope.nameOfParams.push(i);
            }
            params.date = graph.date;
            return $scope.params.push(params);
          });
        }
        return persistence.flush(function() {
          return $scope.$apply();
        });
      });
      return persistence.flush(function() {
        $scope.sensor = arr;
        return $scope.$apply();
      });
    });
  };
});
