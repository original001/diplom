// Generated by CoffeeScript 1.8.0
var DialogController, cordovaApp, moduleCtrl, moduleService;

angular.module('Monitor', ['ngMaterial', 'ngRoute', 'mobile-angular-ui', 'Diplom.controllers.Main', 'Diplom.services.Main']).config(function($mdThemingProvider) {
  return $mdThemingProvider.theme('default').primaryPalette('cyan');
}).config(function($routeProvider, $locationProvider) {
  persistence.store.websql.config(persistence, 'sensors2', 'База данных для мониторинга', 5 * 1024 * 1024);
  $routeProvider.when('/', {
    templateUrl: 'view/map.html',
    controller: 'MapController'
  });
  return $locationProvider.html5Mode(true);
}).constant('DB', {
  Obj: persistence.define('Obj', {
    name: "TEXT"
  }),
  SensCat: persistence.define('SensCat', {
    name: "TEXT"
  }),
  SensMany: persistence.define('SensMany', {
    sensor: "INT",
    GroupOfSens: "INT"
  }),
  Sensor: persistence.define('Sensor', {
    name: "TEXT",
    sensCat: "INT",
    date: "DATE"
  }),
  Graph: persistence.define('Graph', {
    sensor: "INT",
    date: "DATE",
    mu: "INT",
    eps: "INT"
  }),
  GroupOfSens: persistence.define('GroupOfSens', {
    name: "TEXT",
    sensCat: "INT",
    obj: "INT"
  }),
  Maps: persistence.define('Maps', {
    floor: "INT",
    obj: "INT",
    sensor: "INT",
    coorx: "INT",
    coory: "INT"
  })
});

angular.module('mobile-angular-ui', ['mobile-angular-ui.core.activeLinks', 'mobile-angular-ui.core.fastclick', 'mobile-angular-ui.core.sharedState', 'mobile-angular-ui.core.outerClick', 'mobile-angular-ui.components.modals', 'mobile-angular-ui.components.switch', 'mobile-angular-ui.components.sidebars', 'mobile-angular-ui.components.scrollable', 'mobile-angular-ui.components.navbars']);

cordovaApp = {
  initialize: function() {
    return this.bindEvents();
  },
  bindEvents: function() {
    return document.addEventListener('deviceready', this.onDeviceReady, false);
  },
  onDeviceReady: function() {
    return app.receivedEvent('deviceready');
  },
  receivedEvent: function(id) {
    var listeningElement, parentElement, receivedElement;
    parentElement = document.getElementById(id);
    listeningElement = parentElement.querySelector('.listening');
    receivedElement = parentElement.querySelector('.received');
    listeningElement.setAttribute('style', 'display:none');
    receivedElement.setAttribute('style', 'display:block');
    return console.log('Received Event: ' + id);
  }
};

cordovaApp.initialize();

moduleCtrl = angular.module('Diplom.controllers.Main', []).controller('MainController', function($scope, $routeParams, Main, $mdDialog) {
  $scope.lists = [];
  Main.list($scope);
  $scope.showConfirm = function(e, id) {
    var confirm;
    confirm = $mdDialog.confirm().parent(angular.element(document.body)).title('Вы уверены, что хотите удалить елемент').ariaLabel('Подтверждение удаления').ok('Да').cancel('Нет').targetEvent(e);
    return $mdDialog.show(confirm).then(function() {
      return Main.remove(id, $scope);
    });
  };
  $scope.showModalAdd = function(e, name) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: '/view/dialog-add.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Main.addObj(answer, $scope);
    });
  };
  $scope.showModal = function(e, id) {
    return $mdDialog.show({
      controller: DialogController,
      templateUrl: '/view/dialog.tpl.html',
      targetEvent: e
    }).then(function(answer) {
      return Main.update(id, answer, $scope);
    });
  };
  $scope.addSens = function(nameSens, nameObj) {
    return Main.addSens(nameSens, nameObj, $scope);
  };
  $scope.update = function(id, newname) {
    return Main.update(id, newname, $scope);
  };
  $scope.addObj = function(name) {
    return Main.addObj(name, $scope);
  };
  $scope.remove = function(id) {
    return Main.remove(id, $scope);
  };
  return $scope.hello = function(name) {
    return Main.say(name);
  };
});

DialogController = function($scope, $mdDialog) {
  $scope.cancel = function() {
    return $mdDialog.cancel();
  };
  return $scope.answer = function(answer) {
    return $mdDialog.hide(answer);
  };
};

moduleCtrl.controller('MapController', function($scope, $routeParams, Map, $mdDialog, $window, $document, $mdToast, $animate) {
  $scope.lists = [];
  $(function() {
    var w;
    w = $(window);
    $('.index-md-content').height(w.height() - 64);
    return w.resize(function() {
      return $('.index-md-content').height(w.height() - 64);
    });
  });
  $scope.cancelAddPlan = function() {
    $('.help-screen').fadeOut().remove();
    return $(document).off('click', 'md-tab-content.md-active');
  };
  $scope.addPlan = function() {
    var toast;
    toast = false;
    $(".b-plan").each(function() {
      return $('<div class="help-screen" />').appendTo($(this)).fadeIn();
    });
    $(document).on('click', 'md-tab-content.md-active', function(e) {
      var $plan, h, left, sensor, top, w;
      if (!toast) {
        toast = true;
        $scope.showActionToast();
      }
      $plan = $(this).find('.b-plan');
      w = $plan.width();
      h = $plan.height();
      left = (e.offsetX / w * 100).toPrecision(3);
      top = (e.offsetY / h * 100).toPrecision(3);
      sensor = $('<div />').css({
        top: top + '%',
        left: left + '%'
      }).addClass('sensor');
      return $(this).find('.b-plan').append(sensor);
    });
  };
  $scope.addSens = function(name, objId) {
    return Map.addSens(name, objId, $scope);
  };
  $scope.toastPosition = {
    bottom: false,
    top: true,
    left: false,
    right: true
  };
  $scope.getToastPosition = function() {
    return Object.keys($scope.toastPosition).filter(function(pos) {
      return $scope.toastPosition[pos];
    }).join(' ');
  };
  return $scope.showActionToast = function() {
    var toast;
    toast = $mdToast.simple().content('Датчик добавлен').action('Сохранить').highlightAction(false).position($scope.getToastPosition());
    return $mdToast.show(toast).then(function() {
      return $scope.cancelAddPlan();
    });
  };
});

moduleService = angular.module('Diplom.services.Main', []).service('Main', function(DB) {
  DB.Obj.hasMany('sensors', DB.Sensor, 'obj');
  persistence.schemaSync();
  this.list = function($scope) {
    return DB.Obj.all().list(function(items) {
      var arr;
      arr = [];
      return items.forEach(function(item) {
        return item.sensors.list(null, function(res) {
          var count;
          count = res.length;
          arr.push({
            name: item.name,
            id: item.id,
            count: count
          });
          $scope.lists = arr;
          return $scope.$apply();
        });
      });
    });
  };
  this.addObj = function(name, $scope) {
    var t;
    t = new DB.Obj;
    t.name = name;
    persistence.add(t);
    persistence.flush();
    return $scope.lists.push({
      name: name,
      id: t.id,
      count: 0
    });
  };
  this.remove = function(id, $scope) {
    return DB.Obj.all().filter('id', '=', id).destroyAll(function() {
      return $scope.lists.forEach(function(elem, ind) {
        if (elem.id === id) {
          $scope.lists.splice(ind, 1);
          return $scope.$apply();
        }
      });
    });
  };
  this.update = function(id, newName, $scope) {
    return DB.Obj.all().filter('id', '=', id).one(function(obj) {
      obj.name = newName;
      return persistence.flush(function() {
        return $scope.lists.forEach(function(item, ind) {
          if (item.id === obj.id) {
            item.name = newName;
            return $scope.$apply();
          }
        });
      });
    });
  };
  this.addSens = function(sensName, objName, $scope) {
    return DB.Obj.findBy(persistence, null, 'name', objName, function(obj) {
      var s;
      if (obj) {
        s = new DB.Sensor({
          name: sensName,
          sensCat: "1",
          date: new Date().getTime()
        });
        obj.sensors.add(s);
        return persistence.flush(function() {
          return $scope.lists.forEach(function(item, ind) {
            if (item.name === obj.name) {
              item.count += 1;
              return $scope.$apply();
            }
          });
        });
      }
    });
  };
});

moduleService.service('Map', function(DB) {
  DB.Obj.hasMany('sensors', DB.Sensor, 'obj');
  persistence.schemaSync();
  this.list = function($scope) {
    return DB.Obj.all().list(function(items) {
      var arr;
      arr = [];
      return items.forEach(function(item) {
        return item.sensors.list(null, function(res) {
          var count;
          count = res.length;
          arr.push({
            name: item.name,
            id: item.id,
            count: count
          });
          $scope.lists = arr;
          return $scope.$apply();
        });
      });
    });
  };
  this.addObj = function(name, $scope) {
    var t;
    t = new DB.Obj;
    t.name = name;
    persistence.add(t);
    persistence.flush();
    return $scope.lists.push({
      name: name,
      id: t.id,
      count: 0
    });
  };
  this.remove = function(id, $scope) {
    return DB.Obj.all().filter('id', '=', id).destroyAll(function() {
      return $scope.lists.forEach(function(elem, ind) {
        if (elem.id === id) {
          $scope.lists.splice(ind, 1);
          return $scope.$apply();
        }
      });
    });
  };
  this.update = function(id, newName, $scope) {
    return DB.Obj.all().filter('id', '=', id).one(function(obj) {
      obj.name = newName;
      return persistence.flush(function() {
        return $scope.lists.forEach(function(item, ind) {
          if (item.id === obj.id) {
            item.name = newName;
            return $scope.$apply();
          }
        });
      });
    });
  };
  this.addSens = function(sensName, objId, $scope) {
    return DB.Obj.findBy(persistence, null, 'id', objId, function(obj) {
      var s;
      if (obj) {
        s = new DB.Sensor({
          name: sensName,
          sensCat: "1",
          date: new Date().getTime()
        });
        obj.sensors.add(s);
        return persistence.flush(function() {
          return $scope.lists.forEach(function(item, ind) {
            if (item.name === obj.name) {
              item.count += 1;
              return $scope.$apply();
            }
          });
        });
      }
    });
  };
});

//# sourceMappingURL=app.js.map
